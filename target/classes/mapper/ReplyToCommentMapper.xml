<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yunding.lago.dao.ReplyToCommentMapper" >
  <resultMap id="BaseResultMap" type="com.yunding.lago.bean.ReplyToComment" >
    <id column="Id" property="id" jdbcType="INTEGER" />
    <result column="CommentId" property="commentid" jdbcType="INTEGER" />
    <result column="UserId" property="userid" jdbcType="INTEGER" />
    <result column="NickName" property="nickname" jdbcType="VARCHAR" />
    <result column="CreatedOn" property="createdon" jdbcType="TIMESTAMP" />
    <result column="RecordStatus" property="recordstatus" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.yunding.lago.bean.ReplyToComment" extends="BaseResultMap" >
    <result column="Content" property="content" jdbcType="LONGVARCHAR" />
    <result column="ProfilePhotoUrl" property="profilephotourl"
            jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    Id, CommentId, UserId, NickName, CreatedOn, RecordStatus
  </sql>
  <sql id="Blob_Column_List" >
    Content, ProfilePhotoUrl
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ReplyToComment
    where Id = #{id,jdbcType=INTEGER} and RecordStatus = 0
  </select>
  <select id="selectByCommentId" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from ReplyToComment
    where CommentId = #{commentId,jdbcType=INTEGER} and RecordStatus = 0
    order by CreatedOn
  </select>
  <select id="selectByArticleId" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select rtc.Id,rtc.CommentId,rtc.UserId, rtc.NickName, rtc.ProfilePhotoUrl, rtc.CreatedOn,rtc.RecordStatus,rtc.Content
    from ReplyToComment rtc
    inner join Comment c on rtc.CommentId = c.Id
    where c.ArticleId = #{articleId, jdbcType=INTEGER} and rtc.RecordStatus = 0 and c.RecordStatus = 0
    order by rtc.CreatedOn
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ReplyToComment
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yunding.lago.bean.ReplyToComment" >
    insert into ReplyToComment (Id, CommentId, UserId, 
      NickName, ProfilePhotoUrl, CreatedOn, RecordStatus, 
      Content)
    values (#{id,jdbcType=INTEGER}, #{commentid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, 
      #{nickname,jdbcType=VARCHAR}, #{profilephotourl,jdbcType=LONGVARCHAR}, #{createdon,jdbcType=TIMESTAMP}, #{recordstatus,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yunding.lago.bean.ReplyToComment" >
    insert into ReplyToComment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        Id,
      </if>
      <if test="commentid != null" >
        CommentId,
      </if>
      <if test="userid != null" >
        UserId,
      </if>
      <if test="nickname != null" >
        NickName,
      </if>
      <if test="profilephotourl != null" >
        ProfilePhotoUrl,
      </if>
      <if test="createdon != null" >
        CreatedOn,
      </if>
      <if test="recordstatus != null" >
        RecordStatus,
      </if>
      <if test="content != null" >
        Content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="commentid != null" >
        #{commentid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="profilephotourl != null" >
        #{profilephotourl,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdon != null" >
        #{createdon,jdbcType=TIMESTAMP},
      </if>
      <if test="recordstatus != null" >
        #{recordstatus,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yunding.lago.bean.ReplyToComment" >
    update ReplyToComment
    <set >
      <if test="commentid != null" >
        CommentId = #{commentid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        UserId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="nickname != null" >
        NickName = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="profilephotourl != null" >
        ProfilePhotoUrl = #{profilephotourl,jdbcType=LONGVARCHAR},
      </if>
      <if test="createdon != null" >
        CreatedOn = #{createdon,jdbcType=TIMESTAMP},
      </if>
      <if test="recordstatus != null" >
        RecordStatus = #{recordstatus,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        Content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yunding.lago.bean.ReplyToComment" >
    update ReplyToComment
    set CommentId = #{commentid,jdbcType=INTEGER},
      UserId = #{userid,jdbcType=INTEGER},
      NickName = #{nickname,jdbcType=VARCHAR},
      ProfilePhotoUrl = #{profilephotourl,jdbcType=LONGVARCHAR},
      CreatedOn = #{createdon,jdbcType=TIMESTAMP},
      RecordStatus = #{recordstatus,jdbcType=INTEGER},
      Content = #{content,jdbcType=LONGVARCHAR}
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yunding.lago.bean.ReplyToComment" >
    update ReplyToComment
    set CommentId = #{commentid,jdbcType=INTEGER},
      UserId = #{userid,jdbcType=INTEGER},
      NickName = #{nickname,jdbcType=VARCHAR},
      ProfilePhotoUrl = #{profilephotourl,jdbcType=LONGVARCHAR},
      CreatedOn = #{createdon,jdbcType=TIMESTAMP},
      RecordStatus = #{recordstatus,jdbcType=INTEGER}
    where Id = #{id,jdbcType=INTEGER}
  </update>
</mapper>